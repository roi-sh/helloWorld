name: '$(Date:yyyyMMdd).$(Rev:r)'

trigger:
- master

variables:
  buildConfiguration: 'Release'
  dotnetVersion: '8.0.115'
  nugetPackageName: 'MySampleApp'
  sonarProjectKey: 'MySampleApp'
  sonarProjectName: 'MySampleApp'
  sonarHostUrl: 'http://4.180.13.204:9000' 

pool:
  name: 'Default'

stages:
- stage: Build
  displayName: 'Build and Package'
  jobs:
  - job: Build
    displayName: 'Build job'
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET Core SDK'
      inputs:
        version: $(dotnetVersion)
        performMultiLevelLookup: true 

    - task: NuGetAuthenticate@1
      displayName: 'Authenticate with Azure Artifacts'

    - script: dotnet restore
      displayName: 'Restore dependencies'

    - script: dotnet build --configuration $(buildConfiguration) --no-restore
      displayName: 'Build solution'

    - script: dotnet test --configuration $(buildConfiguration) --no-build --verbosity normal
      displayName: 'Run tests'

    - task: DotNetCoreCLI@2
      displayName: 'Pack NuGet package'
      inputs:
        command: 'custom'
        custom: 'pack'
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory) /p:PackageVersion=$(Build.BuildNumber)'
        projects: '**/*.csproj'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish build artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'

- stage: SonarQube_Analysis
  displayName: 'SonarQube Scan'
  dependsOn: Build
  condition: succeeded()  # Only run if Build stage succeeds
  jobs:
  - job: SonarQube_Scan
    steps:

    - task: NuGetAuthenticate@1
      displayName: 'Authenticate with NuGet'
      
    # Install SonarScanner for .NET
    - script: dotnet tool install --global dotnet-sonarscanner --version 5.*
      displayName: 'Install SonarScanner'

    # Begin SonarQube analysis
    - task: SonarQubePrepare@5
      displayName: 'Prepare SonarQube Analysis'
      inputs:
        SonarQube: 'SonarQube_Service_Connection'  # Must match your service connection name
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: $(sonarProjectKey)
        cliProjectName: $(sonarProjectName)
        cliSources: 'src/'  # Directory containing source code
        extraProperties: |
          sonar.host.url=$(sonarHostUrl)
          sonar.login=$(SONARQUBE_TOKEN)  # Use a secret pipeline variable

    # Build the project (SonarQube collects data during build)
    - script: dotnet build --configuration $(buildConfiguration) --no-restore
      displayName: 'Build with SonarQube'

    # Complete analysis & upload results
    - task: SonarQubeAnalyze@5
      displayName: 'Run Code Analysis'

    - task: SonarQubePublish@5
      displayName: 'Publish Results to SonarQube'





# - stage: Publish
#   displayName: 'Publish to Azure Artifacts'
#   dependsOn: Build
#   condition: succeeded()
#   jobs:
#   - job: Publish
#     steps:
#     - task: DownloadBuildArtifacts@0
#       displayName: 'Download build artifacts'
#       inputs:
#         artifactName: 'drop'
#         downloadPath: '$(System.ArtifactsDirectory)'

#     - task: NuGetAuthenticate@1
#       displayName: 'Authenticate with Azure Artifacts'

#     - script: ls -la $(System.ArtifactsDirectory)/drop
#       displayName: 'Verify package exists'

#     - task: NuGetCommand@2
#       displayName: 'Push to Azure Artifacts'
#       inputs:
#         command: 'push'
#         packagesToPush: '$(System.ArtifactsDirectory)/drop/*.nupkg'
#         nuGetFeedType: 'internal'
#         vstsFeed: 'hello'
#         allowPackageConflicts: true

