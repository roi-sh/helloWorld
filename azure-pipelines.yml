name: '$(Date:yyyyMMdd).$(Rev:r)'

trigger:
- master

pool:
  name: "Default"


variables:
  - name: buildConfiguration
    value: 'Release'
  - name: projectPath
    value: '*/.csproj'
  - name: feedName
    value: 'helloWorld'

steps:
- task: SonarQubePrepare@5
  inputs:
    SonarQube: 'sonarqube-connect'  # Name of your service connection
    scannerMode: 'MSBuild'  # Use 'CLI' for non-MSBuild projects
    projectKey: 'nitzanmr-infinitylabs_nitzanmr-infinitylabs_52f92c65-00a1-452a-bf2d-69b81a8e911f'  # Must match key in SonarQube
    projectName: 'nitzanmr-infinitylabs'
    projectVersion: '1.0'

- script: |
    # Your build commands here
    dotnet build
  displayName: 'Build'

- task: SonarQubeAnalyze@5
  displayName: 'Run SonarQube Analysis'

- task: SonarQubePublish@5
  inputs:
    pollingTimeoutSec: '300'
  displayName: 'Publish SonarQube Results'

# Restore dependencies
- task: DotNetCoreCLI@2
  displayName: 'Restore packages'
  inputs:
    command: 'restore'
    projects: '$(projectPath)'
    feedsToUse: 'select'
    vstsFeed: '$(feedName)'

# Create NuGet package
- task: DotNetCoreCLI@2
  displayName: 'Pack NuGet package'
  inputs:
    command: 'pack'
    packagesToPack: '$(projectPath)'
    configuration: '$(buildConfiguration)'
    versioningScheme: 'byPrereleaseNumber' # You can use 'byPrereleaseNumber', 'byEnvVar', or 'off'
    packDirectory: '$(Build.ArtifactStagingDirectory)'

# Publish NuGet package to Azure Artifacts
- task: DotNetCoreCLI@2
  displayName: 'Push NuGet package'
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/*/.nupkg'
    nuGetFeedType: 'internal'
    publishVstsFeed: '$(feedName)'




























# name: '$(Date:yyyyMMdd).$(Rev:r)'

# trigger:
# - master

# variables:
#   buildConfiguration: 'Release'
#   dotnetVersion: '8.0.115'
#   nugetPackageName: 'MySampleApp'

# pool:
#   name: 'Default'

# stages:
# - stage: Build
#   displayName: 'Build and Package'
#   jobs:
#   - job: Build
#     displayName: 'Build job'
#     steps:
#     - task: UseDotNet@2
#       displayName: 'Use .NET Core SDK'
#       inputs:
#         version: $(dotnetVersion)
#         performMultiLevelLookup: true 

#     - task: NuGetAuthenticate@1
#       displayName: 'Authenticate with Azure Artifacts'

#     - script: dotnet restore
#       displayName: 'Restore dependencies'

#     - script: dotnet build --configuration $(buildConfiguration) --no-restore
#       displayName: 'Build solution'

#     - script: dotnet test --configuration $(buildConfiguration) --no-build --verbosity normal
#       displayName: 'Run tests'

#     - task: DotNetCoreCLI@2
#       displayName: 'Pack NuGet package'
#       inputs:
#         command: 'custom'
#         custom: 'pack'
#         arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory) /p:PackageVersion=$(Build.BuildNumber)'
#         projects: '**/*.csproj'

#     - task: PublishBuildArtifacts@1
#       displayName: 'Publish build artifacts'
#       inputs:
#         PathtoPublish: '$(Build.ArtifactStagingDirectory)'
#         ArtifactName: 'drop'
#         publishLocation: 'Container'

# - stage: Publish
#   displayName: 'Publish to Azure Artifacts'
#   dependsOn: Build
#   condition: succeeded()
#   jobs:
#   - job: Publish
#     steps:
#     - task: DownloadBuildArtifacts@0
#       displayName: 'Download build artifacts'
#       inputs:
#         artifactName: 'drop'
#         downloadPath: '$(System.ArtifactsDirectory)'

#     - task: NuGetAuthenticate@1
#       displayName: 'Authenticate with Azure Artifacts'

#     - script: ls -la $(System.ArtifactsDirectory)/drop
#       displayName: 'Verify package exists'

#     - task: NuGetCommand@2
#       displayName: 'Push to Azure Artifacts'
#       inputs:
#         command: 'push'
#         packagesToPush: '$(System.ArtifactsDirectory)/drop/*.nupkg'
#         nuGetFeedType: 'internal'
#         vstsFeed: 'hello'
#         allowPackageConflicts: true

